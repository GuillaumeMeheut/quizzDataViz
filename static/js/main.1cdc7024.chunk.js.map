{"version":3,"sources":["components/score.jsx","components/header.jsx","components/question.jsx","components/reponse.jsx","components/footer.jsx","components/questions.jsx","App.js","serviceWorker.js","index.js"],"names":["Score","state","className","this","props","indice","score","questionLength","Component","Header","printTitle","isQuestion","isCorrect","Question","verifyAnswer","value","correct","reponse","verifyQuestion","printDescription","onClick","description","nextQuestion","Footer","renderDiff","question","Questions","questions","id","setState","length","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1cdc7024.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./score.css\";\n\nclass Score extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div className=\"container_score\">\n        <p className=\"question_number\">Q{this.props.indice + 1}</p>\n        <p className=\"score\">\n          score <br />\n          {this.props.score}/{this.props.questionLength}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Score;\n","import React, { Component } from \"react\";\r\nimport Score from \"./score\";\r\nimport \"./header.css\";\r\n\r\nclass Header extends Component {\r\n  state = {};\r\n\r\n  printTitle = () => {\r\n    if (this.props.isQuestion) return \"Quel est le nombre de:\";\r\n    else return this.props.isCorrect;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"header_container\">\r\n        <Score\r\n          score={this.props.score}\r\n          indice={this.props.indice}\r\n          questionLength={this.props.questionLength}\r\n        />\r\n        <p className=\"header_title\">{this.printTitle()}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport \"./question.css\";\r\n\r\nclass Question extends Component {\r\n  state = {};\r\n\r\n  verifyAnswer = (value) => {\r\n    let correct = false;\r\n    if (value === this.props.reponse) correct = true;\r\n    this.props.verifyQuestion(correct);\r\n    this.props.printDescription();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"questionPropositionContainer\">\r\n          <button onClick={() => this.verifyAnswer(\"-\")}>-</button>\r\n          <p className=\"proposition\">{this.props.value}</p>\r\n          <button onClick={() => this.verifyAnswer(\"+\")}>+</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question;\r\n","import React, { Component } from \"react\";\r\nimport \"./reponse.css\";\r\n\r\nclass Question extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>LA REPONSE EST {this.props.value}</p>\r\n        <p>{this.props.description}</p>\r\n        <button onClick={() => this.props.nextQuestion()}>next question</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question;\r\n","import React, { Component } from \"react\";\r\nimport Question from \"./question\";\r\nimport Reponse from \"./reponse\";\r\nimport \"./footer.css\";\r\n\r\nclass Footer extends Component {\r\n  state = {};\r\n\r\n  renderDiff = () => {\r\n    if (this.props.isQuestion === true)\r\n      return (\r\n        <Question\r\n          value={this.props.value}\r\n          reponse={this.props.reponse}\r\n          verifyQuestion={this.props.verifyQuestion}\r\n          printDescription={this.props.printDescription}\r\n        />\r\n      );\r\n    else\r\n      return (\r\n        <Reponse\r\n          description={this.props.description}\r\n          value={this.props.value}\r\n          nextQuestion={this.props.nextQuestion}\r\n        />\r\n      );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container_footer\">\r\n        <h3 className=\"question\">Nombre de {this.props.question}</h3>\r\n        {this.renderDiff()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport Header from \"./header\";\nimport Footer from \"./footer\";\nimport \"./questions.css\";\n\nclass Questions extends Component {\n  state = {\n    questions: [\n      {\n        id: 1,\n        question: \"Dêchets issues de collectivités (en tonnes):\",\n        value: \"10M\",\n        reponse: \"-\",\n        description: \"Déchets issues des espaces verts, de la voirie et d’assainissement\",\n      },\n      {\n        id: 2,\n        question: \"Dêchets issues de construction (en tonnes):\",\n        value: \"200M\",\n        reponse: \"+\",\n        description: \"Pierres, terre, verre, tuiles, briques, emballages, bois, peinture, etc\",\n      },\n      {\n        id: 3,\n        question: \"Dêchets issues d’activités économiques (en tonnes):\",\n        value: \"50M\",\n        reponse: \"+\",\n      },\n      {\n        id: 4,\n        question: \"Dêchets ménagers (en tonnes):\",\n        value: \"50M\",\n        reponse: \"-\",\n      },\n      {\n        id: 5,\n        question: \"Coût des déchets en France (en 2013):\",\n        value: \"15 Milliards\",\n        reponse: \"+\",\n      },\n      {\n        id: 6,\n        question: \"Emplois dans la gestion des déchets:\",\n        value: \"150.000\",\n        reponse: \"-\",\n      },\n      {\n        id: 7,\n        question: \"Quantité de déchets (kg/habitants/an) en France:\",\n        value: \"500\",\n        reponse: \"+\",\n      },\n      {\n        id: 8,\n        question: \"Quantité de déchets (kg/habitants/an) en Egypte:\",\n        value: \"200\",\n        reponse: \"+\",\n      },\n      {\n        id: 9,\n        question: \"Quantité de déchets (kg/habitants/an) en Turquie:\",\n        value: \"300\",\n        reponse: \"+\",\n      },\n      {\n        id: 10,\n        question: \"Quantité de déchets (kg/habitants/an) en Espagne:\",\n        value: \"500\",\n        reponse: \"-\",\n      },\n      {\n        id: 11,\n        question: \"Quantité de déchets (kg/habitants/an) en Italie:\",\n        value: \"500\",\n        reponse: \"-\",\n      },\n      {\n        id: 12,\n        question: \"Quantité de déchets (kg/habitants/an) en Allemagne:\",\n        value: \"400\",\n        reponse: \"+\",\n      },\n    ],\n    indice: 0,\n    score: 0,\n    isQuestion: true,\n    isCorrect: \"Faux\",\n  };\n\n  verifyQuestion = (correct) => {\n    let score = this.state.score;\n    let isCorrect = this.state.isCorrect;\n    if (correct) {\n      score++;\n      isCorrect = \"Vrai\";\n    } else isCorrect = \"Faux\";\n    this.setState({ score: score, isCorrect: isCorrect });\n  };\n\n  printDescription = () => {\n    let isQuestion = false;\n    this.setState({ isQuestion: isQuestion });\n  };\n\n  nextQuestion = () => {\n    let indice = this.state.indice + 1;\n    let isQuestion = true;\n    this.setState({ indice: indice, isQuestion: isQuestion });\n  };\n\n  render() {\n    return (\n      <div className=\"application\">\n        <Header\n          score={this.state.score}\n          indice={this.state.indice}\n          questionLength={this.state.questions.length}\n          isQuestion={this.state.isQuestion}\n          isCorrect={this.state.isCorrect}\n        />\n\n        <Footer\n          question={this.state.questions[this.state.indice].question}\n          value={this.state.questions[this.state.indice].value}\n          reponse={this.state.questions[this.state.indice].reponse}\n          verifyQuestion={this.verifyQuestion}\n          printDescription={this.printDescription}\n          description={this.state.questions[this.state.indice].description}\n          nextQuestion={this.nextQuestion}\n          indice={this.state.indice}\n          isQuestion={this.state.isQuestion}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Questions;\n","import React from \"react\";\nimport Questions from \"./components/questions\";\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <React.Fragment>\n      <Questions />\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}